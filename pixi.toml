[project]
name = "nelli-ai-scientist"
version = "0.1.0"
description = "Multi-Agent Framework for Novel Lineage Discovery"
channels = ["conda-forge", "bioconda"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

[dependencies]
python = ">=3.9,<3.12"
pip = "*"
nodejs = ">=18"

# Core dependencies for agents and MCP
pydantic = ">=2.7.0"
pyyaml = ">=6.0"
python-dotenv = ">=1.1.0,<2"
pandas = ">=2.2.0"

# Development tools
black = ">=24.0.0"
ruff = ">=0.4.0"

[pypi-dependencies]
openai = ">=1.35.0"
# MCP protocol and tools
mcp = ">=0.1.0"
fastmcp = ">=1.0"
websockets = ">=12.0"

[tasks]
# Code quality tasks
format = "black agents/ mcps/ && ruff check --fix agents/ mcps/"
lint = "black --check agents/ mcps/ && ruff check agents/ mcps/"


# Agent tasks - Updated for cleaned structure
sophisticated-agent = { cmd = "python agents/sophisticated_agent/run_stdio_agent.py", cwd = ".", env = { "PYTHONPATH" = ".", "ENV_FILE" = ".env" } }

# MCP server tasks - Updated for cleaned structure
bioseq-mcp = { cmd = "cd mcps/bioseq && pixi run run", cwd = "." }
bioseq-websocket = { cmd = "cd mcps/bioseq && pixi run websocket", cwd = "." }
bioseq-tunnel = { cmd = "cd mcps/bioseq && pixi run tunnel", cwd = "." }
biocoding-mcp = { cmd = "cd mcps/biocoding && pixi run run", cwd = "." }
filesystem-mcp = { cmd = "cd mcps/filesystem && pixi run run-simple", cwd = "." }

# Development tasks
test-agent = { cmd = "cd agents/sophisticated_agent && python -c 'from src.agent_stdio import *; print(\"Agent imports successful\")'", cwd = "." }
test-mcp = { cmd = "cd mcps/bioseq && python -c 'from src.server import *; print(\"MCP imports successful\")'", cwd = "." }

# Setup tasks
clean = "find . -type d -name __pycache__ -exec rm -rf {} + && find . -type f -name '*.pyc' -delete"


[environments]
default = { solve-group = "default" }
